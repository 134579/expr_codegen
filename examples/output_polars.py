# this code is auto generated by the expr_codegen
# https://github.com/wukan1986/expr_codegen
# 此段代码由 expr_codegen 自动生成，欢迎提交 issue 或 pull request
import re

import numpy as np  # noqa
import pandas as pd  # noqa
import polars as pl  # noqa
import polars.selectors as cs  # noqa
from loguru import logger  # noqa

# from polars_ta.prefix.ta import *  # noqa
# from polars_ta.prefix.talib import *  # noqa
# from polars_ta.prefix.tdx import *  # noqa
from polars_ta.prefix.wq import *  # noqa

# TODO: 数据加载或外部传入
df: pl.DataFrame = df_input

_ = ("OPEN", "CLOSE", "sw_l1", "expr_7", "HIGH", "LOW")
(OPEN, CLOSE, sw_l1, expr_7, HIGH, LOW) = (pl.col(i) for i in _)

_ = ("_x_0", "expr_6", "expr_7", "_x_1", "expr_5", "_x_7", "_x_5", "_x_6", "expr_9", "_x_2", "_x_3", "_x_8", "expr_8", "expr_2", "expr_3", "expr_1", "expr_4")
(_x_0, expr_6, expr_7, _x_1, expr_5, _x_7, _x_5, _x_6, expr_9, _x_2, _x_3, _x_8, expr_8, expr_2, expr_3, expr_1, expr_4) = (pl.col(i) for i in _)

_DATE_ = "date"
_ASSET_ = "asset"


def func_0_ts__asset(df: pl.DataFrame) -> pl.DataFrame:
    df = df.sort(by=[_DATE_])
    # ========================================
    df = df.with_columns(
        # _x_0 = ts_mean(OPEN, 10)
        _x_0=ts_mean(OPEN, 10),
        # expr_6 = ts_delta(OPEN, 10)
        expr_6=ts_delta(OPEN, 10),
        # expr_7 = ts_rank(OPEN + 1, 10)
        expr_7=ts_rank(OPEN + 1, 10),
        # _x_1 = ts_mean(CLOSE, 10)
        _x_1=ts_mean(CLOSE, 10),
        # expr_5 = -ts_corr(OPEN, CLOSE, 10)
        expr_5=-ts_corr(OPEN, CLOSE, 10),
    )
    return df


def func_0_cs__date(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # _x_7 = cs_rank(OPEN)
        _x_7=cs_rank(OPEN)
    )
    return df


def func_0_gp__date__sw_l1(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # _x_5 = gp_demean(sw_l1, CLOSE)
        _x_5=neutralize_demean(CLOSE),
        # _x_6 = gp_rank(sw_l1, CLOSE)
        _x_6=cs_rank(CLOSE),
    )
    return df


def func_0_cl(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # expr_9 = max_(OPEN, HIGH, LOW, abs_(CLOSE))
        expr_9=max_(OPEN, HIGH, LOW, abs_(CLOSE))
    )
    return df


def func_1_cs__date(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # _x_2 = cs_rank(_x_0)
        _x_2=cs_rank(_x_0),
        # _x_3 = cs_rank(_x_1)
        _x_3=cs_rank(_x_1),
    )
    return df


def func_1_ts__asset(df: pl.DataFrame) -> pl.DataFrame:
    df = df.sort(by=[_DATE_])
    # ========================================
    df = df.with_columns(
        # _x_8 = ts_mean(_x_7, 10)
        _x_8=ts_mean(_x_7, 10),
        # expr_8 = ts_rank(expr_7 + 1, 10)
        expr_8=ts_rank(expr_7 + 1, 10),
    )
    return df


def func_2_cl(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # expr_2 = _x_2 + _x_5 + _x_6 - abs_(log(_x_1))
        expr_2=_x_2
        + _x_5
        + _x_6
        - abs_(log(_x_1))
    )
    return df


def func_2_ts__asset(df: pl.DataFrame) -> pl.DataFrame:
    df = df.sort(by=[_DATE_])
    # ========================================
    df = df.with_columns(
        # expr_3 = ts_mean(_x_2, 10)
        expr_3=ts_mean(_x_2, 10),
        # expr_1 = -ts_corr(_x_2, _x_3, 10)
        expr_1=-ts_corr(_x_2, _x_3, 10),
    )
    return df


def func_2_cs__date(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # expr_4 = cs_rank(_x_8)
        expr_4=cs_rank(_x_8)
    )
    return df


# logger.info("start...")


df = df.sort(by=[_DATE_, _ASSET_])
df = df.group_by(by=[_ASSET_]).map_groups(func_0_ts__asset)
df = df.group_by(by=[_DATE_]).map_groups(func_0_cs__date)
df = df.group_by(by=[_DATE_, "sw_l1"]).map_groups(func_0_gp__date__sw_l1)
df = func_0_cl(df)
df = df.group_by(by=[_DATE_]).map_groups(func_1_cs__date)
df = df.group_by(by=[_ASSET_]).map_groups(func_1_ts__asset)
df = func_2_cl(df)
df = df.group_by(by=[_ASSET_]).map_groups(func_2_ts__asset)
df = df.group_by(by=[_DATE_]).map_groups(func_2_cs__date)

"""
#========================================func_0_ts__asset
_x_0 = ts_mean(OPEN, 10)
expr_6 = ts_delta(OPEN, 10)
expr_7 = ts_rank(OPEN + 1, 10)
_x_1 = ts_mean(CLOSE, 10)
expr_5 = -ts_corr(OPEN, CLOSE, 10)
#========================================func_0_cs__date
_x_7 = cs_rank(OPEN)
#========================================func_0_gp__date__sw_l1
_x_5 = gp_demean(sw_l1, CLOSE)
_x_6 = gp_rank(sw_l1, CLOSE)
#========================================func_0_cl
expr_9 = max_(OPEN, HIGH, LOW, abs_(CLOSE))
#========================================func_1_cs__date
_x_2 = cs_rank(_x_0)
_x_3 = cs_rank(_x_1)
#========================================func_1_ts__asset
_x_8 = ts_mean(_x_7, 10)
expr_8 = ts_rank(expr_7 + 1, 10)
#========================================func_2_cl
expr_2 = _x_2 + _x_5 + _x_6 - abs_(log(_x_1))
#========================================func_2_ts__asset
expr_3 = ts_mean(_x_2, 10)
expr_1 = -ts_corr(_x_2, _x_3, 10)
#========================================func_2_cs__date
expr_4 = cs_rank(_x_8)
"""

"""
expr_1 = -ts_corr(cs_rank(ts_mean(OPEN, 10)), cs_rank(ts_mean(CLOSE, 10)), 10)
expr_2 = -abs_(log(ts_mean(CLOSE, 10))) + cs_rank(ts_mean(OPEN, 10)) + gp_demean(sw_l1, CLOSE) + gp_rank(sw_l1, CLOSE)
expr_3 = ts_mean(cs_rank(ts_mean(OPEN, 10)), 10)
expr_4 = cs_rank(ts_mean(cs_rank(OPEN), 10))
expr_5 = -ts_corr(OPEN, CLOSE, 10)
expr_6 = ts_delta(OPEN, 10)
expr_8 = ts_rank(expr_7 + 1, 10)
expr_7 = ts_rank(OPEN + 1, 10)
expr_9 = max_(OPEN, HIGH, LOW, abs_(CLOSE))
"""

# drop intermediate columns
df = df.drop(columns=list(filter(lambda x: re.search(r"^_x_\d+", x), df.columns)))

# shrink
df = df.select(cs.all().shrink_dtype())
df = df.shrink_to_fit()

# logger.info('done')

# save
# df.write_parquet('output.parquet', compression='zstd')

# print(df.tail(5))

# 向外部传出数据
df_output = df
