import polars as pl

from examples.sympy_define import *

_ = Eq, Add, Mul, Pow
# ======================================
# 数据准备

# 向脚本输入数据
df_input = pl.read_parquet('data.parquet')
# 从脚本获取数据
df_output: pl.DataFrame = None

# this code is auto generated by the expr_codegen
# https://github.com/wukan1986/expr_codegen
# 此段代码由 expr_codegen 自动生成，欢迎提交 issue 或 pull request

import re

import bottleneck as bn
import polars as pl
import polars.selectors as cs
import talib as ta

# TODO: 数据加载或外部传入
df = df_input


def rank_pct(expr: pl.Expr) -> pl.Expr:
    """rank(pct=True)"""
    return expr.rank() / (expr.len() - expr.null_count())


def rolling_rank(expr: pl.Expr, window) -> pl.Expr:
    """-1~1 TO 0~1"""
    return expr.map(lambda x: pl.Series((bn.move_rank(x, window) + 1) / 2))


def ts_decay_linear(expr: pl.Expr, window) -> pl.Expr:
    return expr.map(lambda x: ta.WMA(x, window))


def signed_power(x, y):
    return x.sign() * (x.abs() ** y)


def scale(x, scale=1):
    return x / x.abs().sum() * scale


def neutralize(x):
    return x - x.mean()


def func_0_cs__date(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # _x_0 = cs_rank(OPEN)
        _x_0=(rank_pct(pl.col('OPEN'))),
    )
    return df


def func_0_ts__asset__date(df: pl.DataFrame) -> pl.DataFrame:
    df = df.sort(by=["date"])
    # ========================================
    df = df.with_columns(
        # _x_7 = ts_sum(OPEN, 60)
        _x_7=(pl.col('OPEN').rolling_sum(60)),
        # _x_1 = ts_max(LOW, 5)
        _x_1=(pl.col('LOW').rolling_max(5)),
        # _x_9 = ts_sum(LOW, 60)
        _x_9=(pl.col('LOW').rolling_sum(60)),
        # _x_10 = ts_sum(CLOSE, 3)
        _x_10=(pl.col('CLOSE').rolling_sum(3)),
        # _x_12 = ts_std_dev(ts_sum(ts_rank(CLOSE, 3), 60), 60)
        _x_12=(((rolling_rank(pl.col('CLOSE'), 3)).rolling_sum(60)).rolling_std(60, ddof=0)),
        # GP_3 = ts_max(ts_corr(HIGH, CLOSE, 5), 20)
        GP_3=((pl.rolling_corr(pl.col('HIGH'), pl.col('CLOSE'), window_size=5, ddof=0)).rolling_max(20)),
        # GP_14 = ts_std_dev(CLOSE, 60)
        GP_14=(pl.col('CLOSE').rolling_std(60, ddof=0)),
        # GP_19 = ts_std_dev(abs(ts_rank(CLOSE, 60)), 60)
        GP_19=(((rolling_rank(pl.col('CLOSE'), 60)).abs()).rolling_std(60, ddof=0)),
        # GP_20 = ts_std_dev(CLOSE, 3)
        GP_20=(pl.col('CLOSE').rolling_std(3, ddof=0)),
        # GP_28 = ts_std_dev(ts_sum(CLOSE + ts_min(CLOSE, 5) + 20, 60), 3)
        GP_28=(((pl.col('CLOSE') + pl.col('CLOSE').rolling_min(5) + 20).rolling_sum(60)).rolling_std(3, ddof=0)),
    )
    return df


def func_0_cl(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # _x_3 = 1/LOW
        _x_3=(1 / pl.col('LOW')),
        # _x_2 = 1/HIGH
        _x_2=(1 / pl.col('HIGH')),
        # _x_6 = sign(HIGH)
        _x_6=(pl.col('HIGH').sign()),
        # _x_5 = sign(CLOSE)
        _x_5=(pl.col('CLOSE').sign()),
        # GP_10 = CLOSE/min(CLOSE, OPEN)
        GP_10=(pl.col('CLOSE') / pl.min([pl.col('CLOSE'), pl.col('OPEN')])),
    )
    return df


def func_1_cl(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # _x_8 = 1/_x_7
        _x_8=(1 / pl.col('_x_7')),
        # _x_4 = max(_x_0, _x_1)
        _x_4=(pl.max([pl.col('_x_0'), pl.col('_x_1')])),
        # GP_9 = OPEN*_x_2
        GP_9=(pl.col('OPEN') * pl.col('_x_2')),
        # GP_26 = HIGH/_x_5
        GP_26=(pl.col('HIGH') / pl.col('_x_5')),
        # GP_21 = CLOSE/_x_10
        GP_21=(pl.col('CLOSE') / pl.col('_x_10')),
        # GP_18 = _x_12
        GP_18=(pl.col('_x_12')),
        # GP_23 = _x_12
        GP_23=(pl.col('_x_12')),
    )
    return df


def func_1_ts__asset__date(df: pl.DataFrame) -> pl.DataFrame:
    df = df.sort(by=["date"])
    # ========================================
    df = df.with_columns(
        # GP_11 = ts_min(_x_7, 60)
        GP_11=(pl.col('_x_7').rolling_min(60)),
        # GP_4 = _x_9/ts_sum(_x_9, 60)
        GP_4=(pl.col('_x_9') / pl.col('_x_9').rolling_sum(60)),
        # GP_31 = ts_std_dev(abs(ts_rank(_x_6, 10)), 3)
        GP_31=(((rolling_rank(pl.col('_x_6'), 10)).abs()).rolling_std(3, ddof=0)),
        # GP_7 = ts_min(ts_sum(_x_5, 3), 60)
        GP_7=((pl.col('_x_5').rolling_sum(3)).rolling_min(60)),
        # _x_11 = ts_min(_x_10, 60)
        _x_11=(pl.col('_x_10').rolling_min(60)),
    )
    return df


def func_2_ts__asset__date(df: pl.DataFrame) -> pl.DataFrame:
    df = df.sort(by=["date"])
    # ========================================
    df = df.with_columns(
        # GP_1 = _x_8*ts_sum(ts_covariance(ts_corr(HIGH, OPEN, 60), ts_sum(LOW, 10), 40), 60)
        GP_1=(pl.col('_x_8') * (pl.rolling_cov(pl.rolling_corr(pl.col('HIGH'), pl.col('OPEN'), window_size=60, ddof=0), pl.col('LOW').rolling_sum(10), window_size=40, ddof=0)).rolling_sum(60)),
    )
    return df


def func_2_cl(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # GP_5 = OPEN*_x_8
        GP_5=(pl.col('OPEN') * pl.col('_x_8')),
        # GP_2 = _x_2*_x_3*_x_4
        GP_2=(pl.col('_x_2') * pl.col('_x_3') * pl.col('_x_4')),
        # GP_6 = _x_11
        GP_6=(pl.col('_x_11')),
        # GP_30 = _x_11
        GP_30=(pl.col('_x_11')),
    )
    return df


# logger.info("start...")


df = df.sort(by=["date", "asset"])
df = df.groupby(by=['date'], maintain_order=False).apply(func_0_cs__date)
df = df.groupby(by=['asset'], maintain_order=True).apply(func_0_ts__asset__date)
df = func_0_cl(df)
df = func_1_cl(df)
df = df.groupby(by=['asset'], maintain_order=True).apply(func_1_ts__asset__date)
# df = df.groupby(by=['asset'], maintain_order=True).apply(func_2_ts__asset__date)
df = func_2_cl(df)

# #========================================func_0_cs__date
# _x_0 = cs_rank(OPEN)
# #========================================func_0_ts__asset__date
# _x_7 = ts_sum(OPEN, 60)
# _x_1 = ts_max(LOW, 5)
# _x_9 = ts_sum(LOW, 60)
# _x_10 = ts_sum(CLOSE, 3)
# _x_12 = ts_std_dev(ts_sum(ts_rank(CLOSE, 3), 60), 60)
# GP_3 = ts_max(ts_corr(HIGH, CLOSE, 5), 20)
# GP_14 = ts_std_dev(CLOSE, 60)
# GP_19 = ts_std_dev(abs(ts_rank(CLOSE, 60)), 60)
# GP_20 = ts_std_dev(CLOSE, 3)
# GP_28 = ts_std_dev(ts_sum(CLOSE + ts_min(CLOSE, 5) + 20, 60), 3)
# #========================================func_0_cl
# _x_3 = 1/LOW
# _x_2 = 1/HIGH
# _x_6 = sign(HIGH)
# _x_5 = sign(CLOSE)
# GP_10 = CLOSE/min(CLOSE, OPEN)
# #========================================func_1_cl
# _x_8 = 1/_x_7
# _x_4 = max(_x_0, _x_1)
# GP_9 = OPEN*_x_2
# GP_26 = HIGH/_x_5
# GP_21 = CLOSE/_x_10
# GP_18 = _x_12
# GP_23 = _x_12
# #========================================func_1_ts__asset__date
# GP_11 = ts_min(_x_7, 60)
# GP_4 = _x_9/ts_sum(_x_9, 60)
# GP_31 = ts_std_dev(abs(ts_rank(_x_6, 10)), 3)
# GP_7 = ts_min(ts_sum(_x_5, 3), 60)
# _x_11 = ts_min(_x_10, 60)
# #========================================func_2_ts__asset__date
# GP_1 = _x_8*ts_sum(ts_covariance(ts_corr(HIGH, OPEN, 60), ts_sum(LOW, 10), 40), 60)
# #========================================func_2_cl
# GP_5 = OPEN*_x_8
# GP_2 = _x_2*_x_3*_x_4
# GP_6 = _x_11
# GP_30 = _x_11

"""
[OPEN, HIGH, LOW, CLOSE]
"""

"""
GP_1 = ts_sum(ts_covariance(ts_corr(HIGH, OPEN, 60), ts_sum(LOW, 10), 40), 60)/ts_sum(OPEN, 60)
GP_2 = max(cs_rank(OPEN), ts_max(LOW, 5))/(HIGH*LOW)
GP_3 = ts_max(ts_corr(HIGH, CLOSE, 5), 20)
GP_4 = ts_sum(LOW, 60)/ts_sum(ts_sum(LOW, 60), 60)
GP_5 = OPEN/ts_sum(OPEN, 60)
GP_6 = ts_min(ts_sum(CLOSE, 3), 60)
GP_7 = ts_min(ts_sum(sign(CLOSE), 3), 60)
GP_9 = OPEN/HIGH
GP_10 = CLOSE/min(CLOSE, OPEN)
GP_11 = ts_min(ts_sum(OPEN, 60), 60)
GP_14 = ts_std_dev(CLOSE, 60)
GP_18 = ts_std_dev(ts_sum(ts_rank(CLOSE, 3), 60), 60)
GP_19 = ts_std_dev(abs(ts_rank(CLOSE, 60)), 60)
GP_20 = ts_std_dev(CLOSE, 3)
GP_21 = CLOSE/ts_sum(CLOSE, 3)
GP_23 = ts_std_dev(ts_sum(ts_rank(CLOSE, 3), 60), 60)
GP_26 = HIGH/sign(CLOSE)
GP_28 = ts_std_dev(ts_sum(CLOSE + ts_min(CLOSE, 5) + 20, 60), 3)
GP_30 = ts_min(ts_sum(CLOSE, 3), 60)
GP_31 = ts_std_dev(abs(ts_rank(sign(HIGH), 10)), 3)
"""

# drop intermediate columns
df = df.drop(columns=filter(lambda x: re.search(r'^_x_\d+', x), df.columns))

# shrink
df = df.select(cs.all().shrink_dtype())
df = df.shrink_to_fit()
# 向外部传出数据
df_output = df

# logger.info('done')

# save
# df.write_parquet('output.parquet', compression='zstd')

# print(df.tail(5))
df_output = df
