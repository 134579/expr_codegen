"""
本脚本用于调试生成的代码是否可以运行
"""
import os
import sys
from pathlib import Path

# 修改当前目录到上层目录，方便跨不同IDE中使用
pwd = str(Path(__file__).parents[1])
os.chdir(pwd)
sys.path.append(pwd)
# ===============
import polars as pl

# 导入数据部分
df_input = pl.read_parquet('data/data.parquet')
# ===============
# 以下部分从codes_0000.py等文件直接复制过来即可


# ===============
# this code is auto generated by the expr_codegen
# https://github.com/wukan1986/expr_codegen
# 此段代码由 expr_codegen 自动生成，欢迎提交 issue 或 pull request
import re

import numpy as np  # noqa
import pandas as pd  # noqa
import polars as pl  # noqa
import polars.selectors as cs  # noqa
from loguru import logger  # noqa

# from polars_ta.prefix.ta import *  # noqa
# from polars_ta.prefix.talib import *  # noqa
# from polars_ta.prefix.tdx import *  # noqa
from polars_ta.prefix.wq import *  # noqa

# TODO: 数据加载或外部传入
df: pl.DataFrame = df_input

_ = ('OPEN', 'CLOSE', 'HIGH', 'LOW',)
(OPEN, CLOSE, HIGH, LOW,) = (pl.col(i) for i in _)

_ = ('_x_0', 'GP_0095', '_x_61', 'GP_0010', '_x_68', '_x_4', '_x_18', '_x_93', 'GP_0084', '_x_2', '_x_30', '_x_31', '_x_33', '_x_80', '_x_97', 'GP_0036', 'GP_0054', 'GP_0070', 'GP_0053', '_x_52', '_x_59', '_x_72', 'GP_0002', 'GP_0083', 'GP_0094', 'GP_0024', 'GP_0006', '_x_21', '_x_25', '_x_43', '_x_83', 'GP_0003', 'GP_0025', 'GP_0039', 'GP_0041', 'GP_0013', 'GP_0038', 'GP_0062', 'GP_0049', 'GP_0015', '_x_7', '_x_11', '_x_17', '_x_34', '_x_69', '_x_90', '_x_98', 'GP_0005', 'GP_0026', 'GP_0035', 'GP_0061', 'GP_0088', 'GP_0091', 'GP_0017', 'GP_0033', 'GP_0023', 'GP_0022', 'GP_0090', 'GP_0040',
     'GP_0071', '_x_55', '_x_15', '_x_66', 'GP_0085', '_x_42', '_x_50', '_x_76', '_x_78', '_x_88', 'GP_0004', 'GP_0076', '_x_9', '_x_19', '_x_56', '_x_70', 'GP_0032', '_x_14', '_x_38', '_x_62', '_x_64', 'GP_0075', 'GP_0001', 'GP_0096', 'GP_0063', 'GP_0030', 'GP_0044', 'GP_0057', 'GP_0073', 'GP_0079', 'GP_0089', 'GP_0008', 'GP_0016', 'GP_0087', 'GP_0072', 'GP_0048', '_x_22', 'GP_0051', 'GP_0081', 'GP_0067', '_x_35', '_x_41', 'GP_0060', 'GP_0098', 'GP_0099', '_x_3', '_x_16', 'GP_0027', '_x_84', 'GP_0082', '_x_53', 'GP_0050', '_x_82', '_x_27', '_x_44', '_x_10', 'GP_0028', '_x_63', '_x_91',
     'GP_0047', 'GP_0066', 'GP_0056', '_x_96', 'GP_0069', 'GP_0059', 'GP_0068', 'GP_0042', 'GP_0064', 'GP_0018', 'GP_0046', 'GP_0065', 'GP_0021', 'GP_0092', 'GP_0078', 'GP_0007', 'GP_0045', 'GP_0034', 'GP_0086', 'GP_0020', 'GP_0031', 'GP_0058', '_x_92', 'GP_0077', 'GP_0014', 'GP_0019', 'GP_0029', 'GP_0097',)
(_x_0, GP_0095, _x_61, GP_0010, _x_68, _x_4, _x_18, _x_93, GP_0084, _x_2, _x_30, _x_31, _x_33, _x_80, _x_97, GP_0036, GP_0054, GP_0070, GP_0053, _x_52, _x_59, _x_72, GP_0002, GP_0083, GP_0094, GP_0024, GP_0006, _x_21, _x_25, _x_43, _x_83, GP_0003, GP_0025, GP_0039, GP_0041, GP_0013, GP_0038, GP_0062, GP_0049, GP_0015, _x_7, _x_11, _x_17, _x_34, _x_69, _x_90, _x_98, GP_0005, GP_0026, GP_0035, GP_0061, GP_0088, GP_0091, GP_0017, GP_0033, GP_0023, GP_0022, GP_0090, GP_0040, GP_0071, _x_55, _x_15, _x_66, GP_0085, _x_42, _x_50, _x_76, _x_78, _x_88, GP_0004, GP_0076, _x_9, _x_19, _x_56, _x_70,
 GP_0032, _x_14, _x_38, _x_62, _x_64, GP_0075, GP_0001, GP_0096, GP_0063, GP_0030, GP_0044, GP_0057, GP_0073, GP_0079, GP_0089, GP_0008, GP_0016, GP_0087, GP_0072, GP_0048, _x_22, GP_0051, GP_0081, GP_0067, _x_35, _x_41, GP_0060, GP_0098, GP_0099, _x_3, _x_16, GP_0027, _x_84, GP_0082, _x_53, GP_0050, _x_82, _x_27, _x_44, _x_10, GP_0028, _x_63, _x_91, GP_0047, GP_0066, GP_0056, _x_96, GP_0069, GP_0059, GP_0068, GP_0042, GP_0064, GP_0018, GP_0046, GP_0065, GP_0021, GP_0092, GP_0078, GP_0007, GP_0045, GP_0034, GP_0086, GP_0020, GP_0031, GP_0058, _x_92, GP_0077, GP_0014, GP_0019, GP_0029,
 GP_0097,) = (pl.col(i) for i in _)

_DATE_ = 'date'
_ASSET_ = 'asset'


def func_0_cs__date(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # _x_0 = Abs(cs_scale(OPEN))
        _x_0=abs_(cs_scale(OPEN)),
        # GP_0095 = sign(cs_rank(OPEN))
        GP_0095=sign(cs_rank(OPEN)),
        # _x_61 = cs_rank(cs_scale(CLOSE))
        _x_61=cs_rank(cs_scale(CLOSE)),
        # GP_0010 = cs_scale(Max(OPEN, CLOSE - 40)) - 5
        GP_0010=cs_scale(max_(OPEN, CLOSE - 40)) - 5,
        # _x_68 = cs_rank(CLOSE/60)
        _x_68=cs_rank(CLOSE / 60),
        # _x_4 = cs_scale(HIGH)
        _x_4=cs_scale(HIGH),
        # _x_18 = cs_rank(LOW)
        _x_18=cs_rank(LOW),
        # _x_93 = cs_scale(LOW)
        _x_93=cs_scale(LOW),
        # GP_0084 = cs_rank(-LOW + OPEN)
        GP_0084=cs_rank(-LOW + OPEN),
    )
    return df


def func_0_ts__asset(df: pl.DataFrame) -> pl.DataFrame:
    df = df.sort(by=[_DATE_])
    # ========================================
    df = df.with_columns(
        # _x_2 = ts_delta(ts_rank(OPEN, 10), 40)
        _x_2=ts_delta(ts_rank(OPEN, 10), 40),
        # _x_30 = ts_std_dev(OPEN, 60)
        _x_30=ts_std_dev(OPEN, 60),
        # _x_31 = ts_delay(OPEN, 5)/60
        _x_31=ts_delay(OPEN, 5) / 60,
        # _x_33 = ts_sum(OPEN, 5)
        _x_33=ts_sum(OPEN, 5),
        # _x_80 = ts_delta(ts_std_dev(ts_delta(OPEN, 60), 3), 3)
        _x_80=ts_delta(ts_std_dev(ts_delta(OPEN, 60), 3), 3),
        # _x_97 = ts_delta(OPEN, 3)
        _x_97=ts_delta(OPEN, 3),
        # GP_0036 = ts_rank(ts_rank(OPEN, 20), 10)
        GP_0036=ts_rank(ts_rank(OPEN, 20), 10),
        # GP_0054 = ts_sum(ts_delay(OPEN, 40), 20)
        GP_0054=ts_sum(ts_delay(OPEN, 40), 20),
        # GP_0070 = Abs(Min(5*OPEN, ts_rank(OPEN, 40)))
        GP_0070=abs_(min_(5 * OPEN, ts_rank(OPEN, 40))),
        # GP_0053 = log(ts_max(ts_sum(2*OPEN, 40), 40))
        GP_0053=log(ts_max(ts_sum(2 * OPEN, 40), 40)),
        # _x_52 = ts_min(OPEN/10, 20)
        _x_52=ts_min(OPEN / 10, 20),
        # _x_59 = ts_delay(CLOSE, 20)
        _x_59=ts_delay(CLOSE, 20),
        # _x_72 = ts_delay(ts_rank(ts_std_dev(CLOSE, 10), 40), 60)
        _x_72=ts_delay(ts_rank(ts_std_dev(CLOSE, 10), 40), 60),
        # GP_0002 = log(ts_std_dev(ts_sum(ts_min(CLOSE, 10), 20), 20))
        GP_0002=log(ts_std_dev(ts_sum(ts_min(CLOSE, 10), 20), 20)),
        # GP_0083 = ts_rank(log(ts_delay(ts_min(OPEN, 40)/ts_std_dev(CLOSE, 20), 10)), 40)
        GP_0083=ts_rank(log(ts_delay(ts_min(OPEN, 40) / ts_std_dev(CLOSE, 20), 10)), 40),
        # GP_0094 = ts_max(ts_max(ts_min(ts_max(CLOSE, 5), 40), 3), 10)
        GP_0094=ts_max(ts_max(ts_min(ts_max(CLOSE, 5), 40), 3), 10),
        # GP_0024 = ts_rank(CLOSE*OPEN, 10)
        GP_0024=ts_rank(CLOSE * OPEN, 10),
        # GP_0006 = ts_max(ts_rank(ts_delay(log(CLOSE), 20), 3), 5)
        GP_0006=ts_max(ts_rank(ts_delay(log(CLOSE), 20), 3), 5),
        # _x_21 = Max(ts_sum(OPEN, 10), Abs(HIGH))
        _x_21=max_(abs_(HIGH), ts_sum(OPEN, 10)),
        # _x_25 = ts_delay(HIGH, 10)
        _x_25=ts_delay(HIGH, 10),
        # _x_43 = ts_sum(HIGH, 10)
        _x_43=ts_sum(HIGH, 10),
        # _x_83 = -20*HIGH + ts_max(OPEN, 60)
        _x_83=-20 * HIGH + ts_max(OPEN, 60),
        # GP_0003 = ts_delay(ts_rank(HIGH, 60), 1)
        GP_0003=ts_delay(ts_rank(HIGH, 60), 1),
        # GP_0025 = ts_mean(ts_max(HIGH, 3), 5)
        GP_0025=ts_mean(ts_max(HIGH, 3), 5),
        # GP_0039 = Abs(ts_max(ts_max(HIGH, 20) + 60, 60) + ts_sum(ts_sum(CLOSE, 3), 20) - 60)
        GP_0039=abs_(ts_max(ts_max(HIGH, 20) + 60, 60) + ts_sum(ts_sum(CLOSE, 3), 20) - 60),
        # GP_0041 = ts_min(ts_min(ts_mean(HIGH, 20), 60), 3)
        GP_0041=ts_min(ts_min(ts_mean(HIGH, 20), 60), 3),
        # GP_0013 = ts_std_dev(10*HIGH, 40)
        GP_0013=ts_std_dev(10 * HIGH, 40),
        # GP_0038 = ts_delta(-HIGH + OPEN, 10)
        GP_0038=ts_delta(-HIGH + OPEN, 10),
        # GP_0062 = ts_max(HIGH/10, 40)
        GP_0062=ts_max(HIGH / 10, 40),
        # GP_0049 = sign(ts_std_dev(sign(HIGH), 5))
        GP_0049=sign(ts_std_dev(sign(HIGH), 5)),
        # GP_0015 = ts_sum(log(-CLOSE + HIGH), 60)
        GP_0015=ts_sum(log(-CLOSE + HIGH), 60),
        # _x_7 = ts_mean(LOW, 5)
        _x_7=ts_mean(LOW, 5),
        # _x_11 = Min(LOW, ts_delta(sign(LOW), 3))
        _x_11=min_(LOW, ts_delta(sign(LOW), 3)),
        # _x_17 = Min(CLOSE**2, ts_max(LOW, 40))
        _x_17=min_(CLOSE ** 2, ts_max(LOW, 40)),
        # _x_34 = ts_delta(LOW, 1)
        _x_34=ts_delta(LOW, 1),
        # _x_69 = ts_mean(LOW, 40)
        _x_69=ts_mean(LOW, 40),
        # _x_90 = ts_min(LOW, 60)
        _x_90=ts_min(LOW, 60),
        # _x_98 = ts_mean(LOW, 60)
        _x_98=ts_mean(LOW, 60),
        # GP_0005 = Abs(Min(ts_delay(LOW, 5)/ts_max(CLOSE, 3), LOW + ts_delay(OPEN, 20) - 20)) - 60
        GP_0005=abs_(min_(LOW + ts_delay(OPEN, 20) - 20, ts_delay(LOW, 5) / ts_max(CLOSE, 3))) - 60,
        # GP_0026 = -OPEN + ts_std_dev(LOW, 20) + 5
        GP_0026=-OPEN + ts_std_dev(LOW, 20) + 5,
        # GP_0035 = ts_delta(ts_min(LOW, 40), 5)
        GP_0035=ts_delta(ts_min(LOW, 40), 5),
        # GP_0061 = HIGH*OPEN + ts_max(LOW, 60)
        GP_0061=HIGH * OPEN + ts_max(LOW, 60),
        # GP_0088 = ts_mean(LOW, 10) + 20
        GP_0088=ts_mean(LOW, 10) + 20,
        # GP_0091 = ts_max(sign(ts_delay(ts_std_dev(ts_delay(LOW, 20), 20), 5)), 3)
        GP_0091=ts_max(sign(ts_delay(ts_std_dev(ts_delay(LOW, 20), 20), 5)), 3),
        # GP_0017 = ts_delta(LOW + OPEN, 5)
        GP_0017=ts_delta(LOW + OPEN, 5),
        # GP_0033 = ts_std_dev(LOW - 10, 3)/40
        GP_0033=ts_std_dev(LOW - 10, 3) / 40,
        # GP_0023 = ts_delay(log(ts_max(CLOSE + LOW, 3)), 5)
        GP_0023=ts_delay(log(ts_max(CLOSE + LOW, 3)), 5),
        # GP_0022 = ts_rank(Abs(Min(20*CLOSE - 20*LOW, 5*ts_sum(HIGH, 20))), 60)
        GP_0022=ts_rank(abs_(min_(5 * ts_sum(HIGH, 20), 20 * CLOSE - 20 * LOW)), 60),
        # GP_0090 = ts_std_dev(sign(log(ts_min(HIGH*LOW, 40))), 40)
        GP_0090=ts_std_dev(sign(log(ts_min(HIGH * LOW, 40))), 40),
        # GP_0040 = ts_rank(Max(LOW, CLOSE/LOW), 5)
        GP_0040=ts_rank(max_(LOW, CLOSE / LOW), 5),
        # GP_0071 = ts_delta(Abs(ts_min(LOW/40, 10) + 40), 3)
        GP_0071=ts_delta(abs_(ts_min(LOW / 40, 10) + 40), 3),
        # _x_55 = ts_mean(ts_delta(LOW + 60, 3), 60)
        _x_55=ts_mean(ts_delta(LOW + 60, 3), 60),
    )
    return df


def func_0_cl(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # _x_15 = sign(OPEN)
        _x_15=sign(OPEN),
        # _x_66 = Abs(OPEN)
        _x_66=abs_(OPEN),
        # GP_0085 = Abs(log(OPEN)) - 20
        GP_0085=abs_(log(OPEN)) - 20,
        # _x_42 = CLOSE + 20
        _x_42=CLOSE + 20,
        # _x_50 = OPEN/CLOSE
        _x_50=OPEN / CLOSE,
        # _x_76 = Abs(CLOSE)
        _x_76=abs_(CLOSE),
        # _x_78 = CLOSE + OPEN
        _x_78=CLOSE + OPEN,
        # _x_88 = sign(CLOSE)
        _x_88=sign(CLOSE),
        # GP_0004 = 60*CLOSE + 10
        GP_0004=60 * CLOSE + 10,
        # GP_0076 = CLOSE - 25
        GP_0076=CLOSE - 25,
        # _x_9 = 1/HIGH
        _x_9=1 / HIGH,
        # _x_19 = Max(CLOSE, HIGH)
        _x_19=max_(CLOSE, HIGH),
        # _x_56 = HIGH - 1
        _x_56=HIGH - 1,
        # _x_70 = CLOSE*HIGH
        _x_70=CLOSE * HIGH,
        # GP_0032 = Abs(HIGH + 3)
        GP_0032=abs_(HIGH + 3),
        # _x_14 = Abs(LOW)
        _x_14=abs_(LOW),
        # _x_38 = log(LOW)
        _x_38=log(LOW),
        # _x_62 = HIGH + LOW
        _x_62=HIGH + LOW,
        # _x_64 = Min(LOW, OPEN)
        _x_64=min_(LOW, OPEN),
        # GP_0075 = LOW - 23
        GP_0075=LOW - 23,
    )
    return df


def func_1_ts__asset(df: pl.DataFrame) -> pl.DataFrame:
    df = df.sort(by=[_DATE_])
    # ========================================
    df = df.with_columns(
        # GP_0001 = ts_rank(_x_0, 40) + 60
        GP_0001=ts_rank(_x_0, 40) + 60,
        # GP_0096 = ts_sum(ts_max(_x_15 - ts_mean(CLOSE, 60), 3), 3)
        GP_0096=ts_sum(ts_max(_x_15 - ts_mean(CLOSE, 60), 3), 3),
        # GP_0063 = sign(ts_mean(_x_66, 20) + 20)
        GP_0063=sign(ts_mean(_x_66, 20) + 20),
        # GP_0030 = ts_min(ts_sum(_x_42, 3), 20)
        GP_0030=ts_min(ts_sum(_x_42, 3), 20),
        # GP_0044 = ts_sum(ts_delay(_x_50, 5), 40) + 40
        GP_0044=ts_sum(ts_delay(_x_50, 5), 40) + 40,
        # GP_0057 = 5*ts_std_dev(ts_mean(_x_61, 60), 20)
        GP_0057=5 * ts_std_dev(ts_mean(_x_61, 60), 20),
        # GP_0073 = ts_min(Min((CLOSE + 3)*ts_max(_x_76, 3)/(OPEN + 1), Abs(Max(CLOSE, OPEN)/_x_97)), 10)
        GP_0073=ts_min(min_(abs_(max_(CLOSE, OPEN) / _x_97), (CLOSE + 3) * ts_max(_x_76, 3) / (OPEN + 1)), 10),
        # GP_0079 = ts_delta(2*LOW*_x_76 - 1, 1)
        GP_0079=ts_delta(2 * LOW * _x_76 - 1, 1),
        # GP_0089 = ts_std_dev(ts_delay(_x_78, 1), 3)
        GP_0089=ts_std_dev(ts_delay(_x_78, 1), 3),
        # GP_0008 = ts_delay(_x_4, 60)
        GP_0008=ts_delay(_x_4, 60),
        # GP_0016 = _x_9*ts_delta(OPEN, 40)/OPEN
        GP_0016=_x_9 * ts_delta(OPEN, 40) / OPEN,
        # GP_0087 = ts_min(ts_min(_x_25, 10), 60)
        GP_0087=ts_min(ts_min(_x_25, 10), 60),
        # GP_0072 = 3*ts_sum(LOW + _x_56, 5)
        GP_0072=3 * ts_sum(LOW + _x_56, 5),
        # GP_0048 = ts_sum(Min(_x_56, OPEN*_x_9), 3)
        GP_0048=ts_sum(min_(_x_56, OPEN * _x_9), 3),
        # _x_22 = ts_delta(ts_std_dev(_x_14, 10), 60)
        _x_22=ts_delta(ts_std_dev(_x_14, 10), 60),
        # GP_0051 = 5*_x_14 - Min(HIGH, ts_delay(ts_sum(HIGH, 40), 1))
        GP_0051=5 * _x_14 - min_(HIGH, ts_delay(ts_sum(HIGH, 40), 1)),
        # GP_0081 = ts_sum(Max(_x_14, _x_78), 20)
        GP_0081=ts_sum(max_(_x_14, _x_78), 20),
        # GP_0067 = ts_max(HIGH*_x_18*_x_50*Min(HIGH, OPEN), 10)
        GP_0067=ts_max(HIGH * _x_18 * _x_50 * min_(HIGH, OPEN), 10),
        # _x_35 = ts_delay(_x_34, 3)
        _x_35=ts_delay(_x_34, 3),
        # _x_41 = ts_mean(Min(LOW/60, _x_38) + 20, 3)
        _x_41=ts_mean(min_(_x_38, LOW / 60) + 20, 3),
        # GP_0060 = ts_rank(_x_64, 10)
        GP_0060=ts_rank(_x_64, 10),
        # GP_0098 = ts_delay(ts_mean(20*_x_93, 5), 3)
        GP_0098=ts_delay(ts_mean(20 * _x_93, 5), 3),
        # GP_0099 = -ts_std_dev(LOW, 3) + Max(ts_max(-_x_98 + ts_min(HIGH, 20), 60), Min(HIGH, Abs(ts_delta(HIGH, 5))))
        GP_0099=-ts_std_dev(LOW, 3) + max_(min_(HIGH, abs_(ts_delta(HIGH, 5))), ts_max(-_x_98 + ts_min(HIGH, 20), 60)),
    )
    return df


def func_1_cs__date(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # _x_3 = cs_rank(_x_2)
        _x_3=cs_rank(_x_2),
        # _x_16 = cs_scale(_x_15)
        _x_16=cs_scale(_x_15),
        # GP_0027 = cs_scale(_x_30)
        GP_0027=cs_scale(_x_30),
        # _x_84 = sign(cs_scale(_x_66))
        _x_84=sign(cs_scale(_x_66)),
        # GP_0082 = cs_rank(_x_80)
        GP_0082=cs_rank(_x_80),
        # _x_53 = cs_scale(cs_scale(_x_52))
        _x_53=cs_scale(cs_scale(_x_52)),
        # GP_0050 = cs_scale(_x_59)
        GP_0050=cs_scale(_x_59),
        # _x_82 = cs_rank(_x_76)
        _x_82=cs_rank(_x_76),
        # _x_27 = sign(cs_rank(_x_25 - 3))
        _x_27=sign(cs_rank(_x_25 - 3)),
        # _x_44 = cs_rank(_x_43)
        _x_44=cs_rank(_x_43),
        # _x_10 = cs_scale(_x_7)
        _x_10=cs_scale(_x_7),
        # GP_0028 = 2*_x_38 - cs_rank(_x_31)
        GP_0028=2 * _x_38 - cs_rank(_x_31),
        # _x_63 = log(cs_rank(_x_62))
        _x_63=log(cs_rank(_x_62)),
        # _x_91 = cs_scale(_x_90)
        _x_91=cs_scale(_x_90),
        # GP_0047 = cs_scale(_x_55)
        GP_0047=cs_scale(_x_55),
    )
    return df


def func_1_cl(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # GP_0066 = LOW + _x_15 + 1
        GP_0066=LOW + _x_15 + 1,
        # GP_0056 = log(_x_97)
        GP_0056=log(_x_97),
        # _x_96 = log(_x_42)
        _x_96=log(_x_42),
        # GP_0069 = sign(_x_88)
        GP_0069=sign(_x_88),
        # GP_0059 = _x_19 + 10
        GP_0059=_x_19 + 10,
        # GP_0068 = Abs(_x_18)
        GP_0068=abs_(_x_18),
        # GP_0042 = OPEN - _x_34 - 3
        GP_0042=OPEN - _x_34 - 3,
        # GP_0064 = sign(_x_38)
        GP_0064=sign(_x_38),
        # GP_0018 = -10*_x_62 + 10*_x_66 - 10
        GP_0018=-10 * _x_62 + 10 * _x_66 - 10,
        # GP_0046 = _x_64 - 20
        GP_0046=_x_64 - 20,
        # GP_0065 = _x_72*(_x_68 + _x_69 - _x_70)
        GP_0065=_x_72 * (_x_68 + _x_69 - _x_70),
        # GP_0021 = sign(_x_93)
        GP_0021=sign(_x_93),
        # GP_0092 = sign(_x_70 - 60*_x_93 + 5)
        GP_0092=sign(_x_70 - 60 * _x_93 + 5),
        # GP_0078 = (HIGH - LOW - _x_98)/(HIGH - LOW)
        GP_0078=(HIGH - LOW - _x_98) / (HIGH - LOW),
    )
    return df


def func_2_ts__asset(df: pl.DataFrame) -> pl.DataFrame:
    df = df.sort(by=[_DATE_])
    # ========================================
    df = df.with_columns(
        # GP_0007 = ts_mean(_x_3, 5)
        GP_0007=ts_mean(_x_3, 5),
        # GP_0045 = ts_mean(_x_53, 3)
        GP_0045=ts_mean(_x_53, 3),
        # GP_0034 = Max(_x_96, ts_delta(CLOSE/40, 5))
        GP_0034=max_(_x_96, ts_delta(CLOSE / 40, 5)),
        # GP_0086 = ts_min(Min(_x_84, Max(_x_82, _x_83)), 60)
        GP_0086=ts_min(min_(_x_84, max_(_x_82, _x_83)), 60),
        # GP_0020 = ts_delta(_x_27, 3)
        GP_0020=ts_delta(_x_27, 3),
        # GP_0031 = ts_delay(_x_44, 10)
        GP_0031=ts_delay(_x_44, 10),
        # GP_0058 = ts_std_dev(_x_63, 10)
        GP_0058=ts_std_dev(_x_63, 10),
        # _x_92 = ts_mean(_x_91, 60)/ts_mean(_x_88/5, 10)
        _x_92=ts_mean(_x_91, 60) / ts_mean(_x_88 / 5, 10),
    )
    return df


def func_2_cl(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # GP_0077 = _x_96
        GP_0077=_x_96,
        # GP_0014 = -_x_10*_x_9 + _x_11
        GP_0014=-_x_10 * _x_9 + _x_11,
        # GP_0019 = Min(_x_22, _x_21*(_x_18 + _x_19), Max(_x_16, _x_17))
        GP_0019=min_(_x_22, max_(_x_16, _x_17), _x_21 * (_x_18 + _x_19)),
        # GP_0029 = _x_41*(Max(_x_35, _x_33/_x_18) + 3)
        GP_0029=_x_41 * (max_(_x_35, _x_33 / _x_18) + 3),
    )
    return df


def func_3_cs__date(df: pl.DataFrame) -> pl.DataFrame:
    # ========================================
    df = df.with_columns(
        # GP_0097 = cs_scale(_x_92)
        GP_0097=cs_scale(_x_92),
    )
    return df


# logger.info("start...")


df = df.sort(by=[_DATE_, _ASSET_])
df = df.group_by(by=[_DATE_]).map_groups(func_0_cs__date)
df = df.group_by(by=[_ASSET_]).map_groups(func_0_ts__asset)
df = func_0_cl(df)
df = df.group_by(by=[_ASSET_]).map_groups(func_1_ts__asset)
df = df.group_by(by=[_DATE_]).map_groups(func_1_cs__date)
df = func_1_cl(df)
df = df.group_by(by=[_ASSET_]).map_groups(func_2_ts__asset)
df = func_2_cl(df)
df = df.group_by(by=[_DATE_]).map_groups(func_3_cs__date)

"""
#========================================func_0_cs__date
_x_0 = Abs(cs_scale(OPEN))
GP_0095 = sign(cs_rank(OPEN))
_x_61 = cs_rank(cs_scale(CLOSE))
GP_0010 = cs_scale(Max(OPEN, CLOSE - 40)) - 5
_x_68 = cs_rank(CLOSE/60)
_x_4 = cs_scale(HIGH)
_x_18 = cs_rank(LOW)
_x_93 = cs_scale(LOW)
GP_0084 = cs_rank(-LOW + OPEN)
#========================================func_0_ts__asset
_x_2 = ts_delta(ts_rank(OPEN, 10), 40)
_x_30 = ts_std_dev(OPEN, 60)
_x_31 = ts_delay(OPEN, 5)/60
_x_33 = ts_sum(OPEN, 5)
_x_80 = ts_delta(ts_std_dev(ts_delta(OPEN, 60), 3), 3)
_x_97 = ts_delta(OPEN, 3)
GP_0036 = ts_rank(ts_rank(OPEN, 20), 10)
GP_0054 = ts_sum(ts_delay(OPEN, 40), 20)
GP_0070 = Abs(Min(5*OPEN, ts_rank(OPEN, 40)))
GP_0053 = log(ts_max(ts_sum(2*OPEN, 40), 40))
_x_52 = ts_min(OPEN/10, 20)
_x_59 = ts_delay(CLOSE, 20)
_x_72 = ts_delay(ts_rank(ts_std_dev(CLOSE, 10), 40), 60)
GP_0002 = log(ts_std_dev(ts_sum(ts_min(CLOSE, 10), 20), 20))
GP_0083 = ts_rank(log(ts_delay(ts_min(OPEN, 40)/ts_std_dev(CLOSE, 20), 10)), 40)
GP_0094 = ts_max(ts_max(ts_min(ts_max(CLOSE, 5), 40), 3), 10)
GP_0024 = ts_rank(CLOSE*OPEN, 10)
GP_0006 = ts_max(ts_rank(ts_delay(log(CLOSE), 20), 3), 5)
_x_21 = Max(ts_sum(OPEN, 10), Abs(HIGH))
_x_25 = ts_delay(HIGH, 10)
_x_43 = ts_sum(HIGH, 10)
_x_83 = -20*HIGH + ts_max(OPEN, 60)
GP_0003 = ts_delay(ts_rank(HIGH, 60), 1)
GP_0025 = ts_mean(ts_max(HIGH, 3), 5)
GP_0039 = Abs(ts_max(ts_max(HIGH, 20) + 60, 60) + ts_sum(ts_sum(CLOSE, 3), 20) - 60)
GP_0041 = ts_min(ts_min(ts_mean(HIGH, 20), 60), 3)
GP_0013 = ts_std_dev(10*HIGH, 40)
GP_0038 = ts_delta(-HIGH + OPEN, 10)
GP_0062 = ts_max(HIGH/10, 40)
GP_0049 = sign(ts_std_dev(sign(HIGH), 5))
GP_0015 = ts_sum(log(-CLOSE + HIGH), 60)
_x_7 = ts_mean(LOW, 5)
_x_11 = Min(LOW, ts_delta(sign(LOW), 3))
_x_17 = Min(CLOSE**2, ts_max(LOW, 40))
_x_34 = ts_delta(LOW, 1)
_x_69 = ts_mean(LOW, 40)
_x_90 = ts_min(LOW, 60)
_x_98 = ts_mean(LOW, 60)
GP_0005 = Abs(Min(ts_delay(LOW, 5)/ts_max(CLOSE, 3), LOW + ts_delay(OPEN, 20) - 20)) - 60
GP_0026 = -OPEN + ts_std_dev(LOW, 20) + 5
GP_0035 = ts_delta(ts_min(LOW, 40), 5)
GP_0061 = HIGH*OPEN + ts_max(LOW, 60)
GP_0088 = ts_mean(LOW, 10) + 20
GP_0091 = ts_max(sign(ts_delay(ts_std_dev(ts_delay(LOW, 20), 20), 5)), 3)
GP_0017 = ts_delta(LOW + OPEN, 5)
GP_0033 = ts_std_dev(LOW - 10, 3)/40
GP_0023 = ts_delay(log(ts_max(CLOSE + LOW, 3)), 5)
GP_0022 = ts_rank(Abs(Min(20*CLOSE - 20*LOW, 5*ts_sum(HIGH, 20))), 60)
GP_0090 = ts_std_dev(sign(log(ts_min(HIGH*LOW, 40))), 40)
GP_0040 = ts_rank(Max(LOW, CLOSE/LOW), 5)
GP_0071 = ts_delta(Abs(ts_min(LOW/40, 10) + 40), 3)
_x_55 = ts_mean(ts_delta(LOW + 60, 3), 60)
#========================================func_0_cl
_x_15 = sign(OPEN)
_x_66 = Abs(OPEN)
GP_0085 = Abs(log(OPEN)) - 20
_x_42 = CLOSE + 20
_x_50 = OPEN/CLOSE
_x_76 = Abs(CLOSE)
_x_78 = CLOSE + OPEN
_x_88 = sign(CLOSE)
GP_0004 = 60*CLOSE + 10
GP_0076 = CLOSE - 25
_x_9 = 1/HIGH
_x_19 = Max(CLOSE, HIGH)
_x_56 = HIGH - 1
_x_70 = CLOSE*HIGH
GP_0032 = Abs(HIGH + 3)
_x_14 = Abs(LOW)
_x_38 = log(LOW)
_x_62 = HIGH + LOW
_x_64 = Min(LOW, OPEN)
GP_0075 = LOW - 23
#========================================func_1_ts__asset
GP_0001 = ts_rank(_x_0, 40) + 60
GP_0096 = ts_sum(ts_max(_x_15 - ts_mean(CLOSE, 60), 3), 3)
GP_0063 = sign(ts_mean(_x_66, 20) + 20)
GP_0030 = ts_min(ts_sum(_x_42, 3), 20)
GP_0044 = ts_sum(ts_delay(_x_50, 5), 40) + 40
GP_0057 = 5*ts_std_dev(ts_mean(_x_61, 60), 20)
GP_0073 = ts_min(Min((CLOSE + 3)*ts_max(_x_76, 3)/(OPEN + 1), Abs(Max(CLOSE, OPEN)/_x_97)), 10)
GP_0079 = ts_delta(2*LOW*_x_76 - 1, 1)
GP_0089 = ts_std_dev(ts_delay(_x_78, 1), 3)
GP_0008 = ts_delay(_x_4, 60)
GP_0016 = _x_9*ts_delta(OPEN, 40)/OPEN
GP_0087 = ts_min(ts_min(_x_25, 10), 60)
GP_0072 = 3*ts_sum(LOW + _x_56, 5)
GP_0048 = ts_sum(Min(_x_56, OPEN*_x_9), 3)
_x_22 = ts_delta(ts_std_dev(_x_14, 10), 60)
GP_0051 = 5*_x_14 - Min(HIGH, ts_delay(ts_sum(HIGH, 40), 1))
GP_0081 = ts_sum(Max(_x_14, _x_78), 20)
GP_0067 = ts_max(HIGH*_x_18*_x_50*Min(HIGH, OPEN), 10)
_x_35 = ts_delay(_x_34, 3)
_x_41 = ts_mean(Min(LOW/60, _x_38) + 20, 3)
GP_0060 = ts_rank(_x_64, 10)
GP_0098 = ts_delay(ts_mean(20*_x_93, 5), 3)
GP_0099 = -ts_std_dev(LOW, 3) + Max(ts_max(-_x_98 + ts_min(HIGH, 20), 60), Min(HIGH, Abs(ts_delta(HIGH, 5))))
#========================================func_1_cs__date
_x_3 = cs_rank(_x_2)
_x_16 = cs_scale(_x_15)
GP_0027 = cs_scale(_x_30)
_x_84 = sign(cs_scale(_x_66))
GP_0082 = cs_rank(_x_80)
_x_53 = cs_scale(cs_scale(_x_52))
GP_0050 = cs_scale(_x_59)
_x_82 = cs_rank(_x_76)
_x_27 = sign(cs_rank(_x_25 - 3))
_x_44 = cs_rank(_x_43)
_x_10 = cs_scale(_x_7)
GP_0028 = 2*_x_38 - cs_rank(_x_31)
_x_63 = log(cs_rank(_x_62))
_x_91 = cs_scale(_x_90)
GP_0047 = cs_scale(_x_55)
#========================================func_1_cl
GP_0066 = LOW + _x_15 + 1
GP_0056 = log(_x_97)
_x_96 = log(_x_42)
GP_0069 = sign(_x_88)
GP_0059 = _x_19 + 10
GP_0068 = Abs(_x_18)
GP_0042 = OPEN - _x_34 - 3
GP_0064 = sign(_x_38)
GP_0018 = -10*_x_62 + 10*_x_66 - 10
GP_0046 = _x_64 - 20
GP_0065 = _x_72*(_x_68 + _x_69 - _x_70)
GP_0021 = sign(_x_93)
GP_0092 = sign(_x_70 - 60*_x_93 + 5)
GP_0078 = (HIGH - LOW - _x_98)/(HIGH - LOW)
#========================================func_2_ts__asset
GP_0007 = ts_mean(_x_3, 5)
GP_0045 = ts_mean(_x_53, 3)
GP_0034 = Max(_x_96, ts_delta(CLOSE/40, 5))
GP_0086 = ts_min(Min(_x_84, Max(_x_82, _x_83)), 60)
GP_0020 = ts_delta(_x_27, 3)
GP_0031 = ts_delay(_x_44, 10)
GP_0058 = ts_std_dev(_x_63, 10)
_x_92 = ts_mean(_x_91, 60)/ts_mean(_x_88/5, 10)
#========================================func_2_cl
GP_0077 = _x_96
GP_0014 = -_x_10*_x_9 + _x_11
GP_0019 = Min(_x_22, _x_21*(_x_18 + _x_19), Max(_x_16, _x_17))
GP_0029 = _x_41*(Max(_x_35, _x_33/_x_18) + 3)
#========================================func_3_cs__date
GP_0097 = cs_scale(_x_92)
"""

"""
GP_0001 = ts_rank(Abs(cs_scale(OPEN)), 40) + 60
GP_0002 = log(ts_std_dev(ts_sum(ts_min(CLOSE, 10), 20), 20))
GP_0003 = ts_delay(ts_rank(HIGH, 60), 1)
GP_0004 = 60*CLOSE + 10
GP_0005 = Abs(Min(ts_delay(LOW, 5)/ts_max(CLOSE, 3), LOW + ts_delay(OPEN, 20) - 20)) - 60
GP_0006 = ts_max(ts_rank(ts_delay(log(CLOSE), 20), 3), 5)
GP_0007 = ts_mean(cs_rank(ts_delta(ts_rank(OPEN, 10), 40)), 5)
GP_0008 = ts_delay(cs_scale(HIGH), 60)
GP_0010 = cs_scale(Max(OPEN, CLOSE - 40)) - 5
GP_0013 = ts_std_dev(10*HIGH, 40)
GP_0014 = Min(LOW, ts_delta(sign(LOW), 3)) - cs_scale(ts_mean(LOW, 5))/HIGH
GP_0015 = ts_sum(log(-CLOSE + HIGH), 60)
GP_0016 = ts_delta(OPEN, 40)/(HIGH*OPEN)
GP_0017 = ts_delta(LOW + OPEN, 5)
GP_0018 = -10*HIGH - 10*LOW + 10*Abs(OPEN) - 10
GP_0019 = Min((cs_rank(LOW) + Max(CLOSE, HIGH))*Max(ts_sum(OPEN, 10), Abs(HIGH)), ts_delta(ts_std_dev(Abs(LOW), 10), 60), Max(cs_scale(sign(OPEN)), Min(CLOSE**2, ts_max(LOW, 40))))
GP_0020 = ts_delta(sign(cs_rank(ts_delay(HIGH, 10) - 3)), 3)
GP_0021 = sign(cs_scale(LOW))
GP_0022 = ts_rank(Abs(Min(20*CLOSE - 20*LOW, 5*ts_sum(HIGH, 20))), 60)
GP_0023 = ts_delay(log(ts_max(CLOSE + LOW, 3)), 5)
GP_0024 = ts_rank(CLOSE*OPEN, 10)
GP_0025 = ts_mean(ts_max(HIGH, 3), 5)
GP_0026 = -OPEN + ts_std_dev(LOW, 20) + 5
GP_0027 = cs_scale(ts_std_dev(OPEN, 60))
GP_0028 = -cs_rank(ts_delay(OPEN, 5)/60) + 2*log(LOW)
GP_0029 = (Max(ts_sum(OPEN, 5)/cs_rank(LOW), ts_delay(ts_delta(LOW, 1), 3)) + 3)*ts_mean(Min(LOW/60, log(LOW)) + 20, 3)
GP_0030 = ts_min(ts_sum(CLOSE + 20, 3), 20)
GP_0031 = ts_delay(cs_rank(ts_sum(HIGH, 10)), 10)
GP_0032 = Abs(HIGH + 3)
GP_0033 = ts_std_dev(LOW - 10, 3)/40
GP_0034 = Max(ts_delta(CLOSE/40, 5), log(CLOSE + 20))
GP_0035 = ts_delta(ts_min(LOW, 40), 5)
GP_0036 = ts_rank(ts_rank(OPEN, 20), 10)
GP_0038 = ts_delta(-HIGH + OPEN, 10)
GP_0039 = Abs(ts_max(ts_max(HIGH, 20) + 60, 60) + ts_sum(ts_sum(CLOSE, 3), 20) - 60)
GP_0040 = ts_rank(Max(LOW, CLOSE/LOW), 5)
GP_0041 = ts_min(ts_min(ts_mean(HIGH, 20), 60), 3)
GP_0042 = OPEN - ts_delta(LOW, 1) - 3
GP_0044 = ts_sum(ts_delay(OPEN/CLOSE, 5), 40) + 40
GP_0045 = ts_mean(cs_scale(cs_scale(ts_min(OPEN/10, 20))), 3)
GP_0046 = Min(LOW, OPEN) - 20
GP_0047 = cs_scale(ts_mean(ts_delta(LOW + 60, 3), 60))
GP_0048 = ts_sum(Min(OPEN/HIGH, HIGH - 1), 3)
GP_0049 = sign(ts_std_dev(sign(HIGH), 5))
GP_0050 = cs_scale(ts_delay(CLOSE, 20))
GP_0051 = 5*Abs(LOW) - Min(HIGH, ts_delay(ts_sum(HIGH, 40), 1))
GP_0053 = log(ts_max(ts_sum(2*OPEN, 40), 40))
GP_0054 = ts_sum(ts_delay(OPEN, 40), 20)
GP_0056 = log(ts_delta(OPEN, 3))
GP_0057 = 5*ts_std_dev(ts_mean(cs_rank(cs_scale(CLOSE)), 60), 20)
GP_0058 = ts_std_dev(log(cs_rank(HIGH + LOW)), 10)
GP_0059 = Max(CLOSE, HIGH) + 10
GP_0060 = ts_rank(Min(LOW, OPEN), 10)
GP_0061 = HIGH*OPEN + ts_max(LOW, 60)
GP_0062 = ts_max(HIGH/10, 40)
GP_0063 = sign(ts_mean(Abs(OPEN), 20) + 20)
GP_0064 = sign(log(LOW))
GP_0065 = (-CLOSE*HIGH + cs_rank(CLOSE/60) + ts_mean(LOW, 40))*ts_delay(ts_rank(ts_std_dev(CLOSE, 10), 40), 60)
GP_0066 = LOW + sign(OPEN) + 1
GP_0067 = ts_max(HIGH*OPEN*cs_rank(LOW)*Min(HIGH, OPEN)/CLOSE, 10)
GP_0068 = Abs(cs_rank(LOW))
GP_0069 = sign(sign(CLOSE))
GP_0070 = Abs(Min(5*OPEN, ts_rank(OPEN, 40)))
GP_0071 = ts_delta(Abs(ts_min(LOW/40, 10) + 40), 3)
GP_0072 = 3*ts_sum(HIGH + LOW - 1, 5)
GP_0073 = ts_min(Min((CLOSE + 3)*ts_max(Abs(CLOSE), 3)/(OPEN + 1), Abs(Max(CLOSE, OPEN)/ts_delta(OPEN, 3))), 10)
GP_0075 = LOW - 23
GP_0076 = CLOSE - 25
GP_0077 = log(CLOSE + 20)
GP_0078 = 1 + ts_mean(LOW, 60)/(-HIGH + LOW)
GP_0079 = ts_delta(2*LOW*Abs(CLOSE) - 1, 1)
GP_0081 = ts_sum(Max(CLOSE + OPEN, Abs(LOW)), 20)
GP_0082 = cs_rank(ts_delta(ts_std_dev(ts_delta(OPEN, 60), 3), 3))
GP_0083 = ts_rank(log(ts_delay(ts_min(OPEN, 40)/ts_std_dev(CLOSE, 20), 10)), 40)
GP_0084 = cs_rank(-LOW + OPEN)
GP_0085 = Abs(log(OPEN)) - 20
GP_0086 = ts_min(Min(sign(cs_scale(Abs(OPEN))), Max(-20*HIGH + ts_max(OPEN, 60), cs_rank(Abs(CLOSE)))), 60)
GP_0087 = ts_min(ts_min(ts_delay(HIGH, 10), 10), 60)
GP_0088 = ts_mean(LOW, 10) + 20
GP_0089 = ts_std_dev(ts_delay(CLOSE + OPEN, 1), 3)
GP_0090 = ts_std_dev(sign(log(ts_min(HIGH*LOW, 40))), 40)
GP_0091 = ts_max(sign(ts_delay(ts_std_dev(ts_delay(LOW, 20), 20), 5)), 3)
GP_0092 = sign(CLOSE*HIGH - 60*cs_scale(LOW) + 5)
GP_0094 = ts_max(ts_max(ts_min(ts_max(CLOSE, 5), 40), 3), 10)
GP_0095 = sign(cs_rank(OPEN))
GP_0096 = ts_sum(ts_max(sign(OPEN) - ts_mean(CLOSE, 60), 3), 3)
GP_0097 = cs_scale(ts_mean(cs_scale(ts_min(LOW, 60)), 60)/ts_mean(sign(CLOSE)/5, 10))
GP_0098 = ts_delay(ts_mean(20*cs_scale(LOW), 5), 3)
GP_0099 = -ts_std_dev(LOW, 3) + Max(ts_max(-ts_mean(LOW, 60) + ts_min(HIGH, 20), 60), Min(HIGH, Abs(ts_delta(HIGH, 5))))
"""

# drop intermediate columns
df = df.drop(columns=list(filter(lambda x: re.search(r"^_x_\d+", x), df.columns)))

# shrink
df = df.select(cs.all().shrink_dtype())
df = df.shrink_to_fit()

# logger.info('done')

# save
# df.write_parquet('output.parquet', compression='zstd')

# print(df.tail(5))

# 向外部传出数据
df_output = df
