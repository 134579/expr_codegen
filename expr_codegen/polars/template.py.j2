# this code is auto generated by the expr_codegen
# https://github.com/wukan1986/expr_codegen
# 此段代码由 expr_codegen 自动生成，欢迎提交 issue 或 pull request

import re

import bottleneck as bn
import numpy as np
import polars as pl
import polars.selectors as cs
import talib as ta
from loguru import logger


# TODO: 数据加载或外部传入
# df = pl.DataFrame()


def _rank_pct(expr: pl.Expr) -> pl.Expr:
    """rank(pct=True)"""
    return expr.rank() / (expr.len() - expr.null_count())


def _rolling_rank(expr: pl.Expr, window) -> pl.Expr:
    """-1~1 TO 0~1"""
    return expr.map(lambda x: pl.Series((bn.move_rank(x, window) + 1) / 2))

def _rolling_argmax(expr: pl.Expr, window) -> pl.Expr:
    return expr.map(lambda x: pl.Series(bn.move_argmax(x, window)))


def _rolling_argmin(expr: pl.Expr, window) -> pl.Expr:
    return expr.map(lambda x: pl.Series(bn.move_argmin(x, window)))

# !!! 函数的命名一定不能与sympy中定义的一样，否则在exec(,globals())后会修改同名变量，最终导致第二次eval(expr)时报错。所以全加下划线
def _ts_decay_linear(expr: pl.Expr, window) -> pl.Expr:
    return expr.map(lambda x: ta.WMA(x, window))

def _signed_power(x, y):
    return x.sign() * (x.abs() ** y)

def _scale(x, scale=1):
    return x / x.abs().sum() * scale

def _neutralize(x):
    return x - x.mean()

{% for key, value in funcs.items() %}
def {{ key }}(df: pl.DataFrame) -> pl.DataFrame:
{{ value }}
    return df
{% endfor %}

logger.info("start...")

{% for key, value in groupbys.items() %}
{{ value-}}
{% endfor %}

{% for row in exprs_dst %}
{{ row-}}
{% endfor %}

"""
{{ syms_dst }}
"""

"""
{%-for key, value in exprs_src.items() %}
{{ key }} = {{ value-}}
{% endfor %}
"""

# drop intermediate columns
df = df.drop(columns=filter(lambda x: re.search(r'^_x_\d+', x), df.columns))

# shrink
df = df.select(cs.all().shrink_dtype())
df = df.shrink_to_fit()

logger.info('done')

# save
# df.write_parquet('output.parquet', compression='zstd')

print(df.tail(5))
