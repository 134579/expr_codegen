import inspect

import pandas as pd


def get_function_names(module, startswith):
    m = __import__(module, fromlist=['*'])
    funcs = inspect.getmembers(m, inspect.isfunction)
    names = []
    modules = []
    for name, func in funcs:
        mstr: str = func.__module__
        if mstr.startswith(startswith):
            names.append(name)
            modules.append(mstr)
    return pd.DataFrame({'name': names, 'module': modules}).sort_values(by=['module', 'name'])


def gen_symbols(df: pd.DataFrame):
    txts = ["""# this code is auto generated by the tools/codegen_symbols.py
from sympy import symbols, Function
"""]
    ll = df.groupby(by='module').agg(lambda x: x.to_list())
    dd = ll.to_dict(orient='dict')['name']
    for k, v in dd.items():
        txts.append(f'# {k}')
        syms = ', '.join(v)
        txts.append(f"{syms} = symbols('{syms}', cls=Function)")
    txts.append('')
    return txts


def save(txts, module, write=False):
    m = __import__(module, fromlist=['*'])
    file = m.__file__
    print('save to', file)
    text = '\n'.join(txts)
    if write:
        with open(file, 'w', encoding='utf-8') as f:
            f.write(text)
    else:
        print(text)


if __name__ == '__main__':
    #
    module = 'polars_ta.prefix.wq'
    startswith = 'polars_ta.wq'
    names = get_function_names(module, startswith)
    txts = gen_symbols(names)
    save(txts, 'expr_codegen.symbols.wq', write=True)

    #
    module = 'polars_ta.prefix.ta'
    startswith = 'polars_ta.ta'
    names = get_function_names(module, startswith)
    txts = gen_symbols(names)
    save(txts, 'expr_codegen.symbols.ta', write=True)

    #
    module = 'polars_ta.prefix.talib'
    startswith = 'polars_ta.talib'
    names = get_function_names(module, startswith)
    txts = gen_symbols(names)
    save(txts, 'expr_codegen.symbols.talib', write=True)

    #
    module = 'polars_ta.prefix.tdx'
    startswith = 'polars_ta.tdx'
    names = get_function_names(module, startswith)
    txts = gen_symbols(names)
    save(txts, 'expr_codegen.symbols.tdx', write=True)
